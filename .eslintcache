[{"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\index.tsx":"1","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\App.tsx":"2","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\fetch\\key.tsx":"3","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\context\\apiDataContext.tsx":"4","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\hooks\\useStoredData.tsx":"5","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\BoxDisplay.tsx":"6","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Table.tsx":"7","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\SearchBar.tsx":"8","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Row.tsx":"9","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Result.tsx":"10","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Paginate.tsx":"11","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\hooks\\useContainerDimensions.tsx":"12","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Footer.tsx":"13","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Header.tsx":"14","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\MobileRow.tsx":"15","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Graph.tsx":"16","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\CustomVictoryGroup.tsx":"17","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\fetch\\api.tsx":"18"},{"size":185,"mtime":1612278020508,"results":"19","hashOfConfig":"20"},{"size":489,"mtime":1613309627325,"results":"21","hashOfConfig":"20"},{"size":88,"mtime":1612276496700,"results":"22","hashOfConfig":"20"},{"size":1940,"mtime":1613313652476,"results":"23","hashOfConfig":"20"},{"size":941,"mtime":1613313905300,"results":"24","hashOfConfig":"20"},{"size":836,"mtime":1613307225163,"results":"25","hashOfConfig":"20"},{"size":2789,"mtime":1613309468813,"results":"26","hashOfConfig":"20"},{"size":5127,"mtime":1613313384736,"results":"27","hashOfConfig":"20"},{"size":1103,"mtime":1613310512642,"results":"28","hashOfConfig":"20"},{"size":2513,"mtime":1613312732135,"results":"29","hashOfConfig":"20"},{"size":3837,"mtime":1613310167445,"results":"30","hashOfConfig":"20"},{"size":1030,"mtime":1613313909853,"results":"31","hashOfConfig":"20"},{"size":104,"mtime":1613309230808,"results":"32","hashOfConfig":"20"},{"size":119,"mtime":1613309213993,"results":"33","hashOfConfig":"20"},{"size":1482,"mtime":1613309628432,"results":"34","hashOfConfig":"20"},{"size":6416,"mtime":1613313570555,"results":"35","hashOfConfig":"20"},{"size":1208,"mtime":1613229244714,"results":"36","hashOfConfig":"20"},{"size":252,"mtime":1613313592365,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"o1q3qo",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\index.tsx",[],["80","81"],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\App.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\fetch\\key.tsx",[],["82","83"],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\context\\apiDataContext.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\hooks\\useStoredData.tsx",["84","85"],"import {useState, useEffect} from 'react'\r\n\r\n// custom hook for saving data into localStorage and serve data from localStorage on start up.\r\nexport const useStoredData = (type: string, defaultValue?: string) => {\r\n    type useStoredDataRes = [\r\n        data: string,\r\n        setCurrentData: (value: string) => void\r\n    ]\r\n    const [data, setData] = useState<string>(defaultValue || '')\r\n\r\n    useEffect (() => {\r\n        try {\r\n            setData(window.localStorage.getItem(type) || '' )\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n        \r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        try {\r\n            window.localStorage.setItem(type, data)\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n        \r\n    }, [data])\r\n\r\n    const setCurrentData = (value: string) =>{\r\n        setData(value)\r\n    }\r\n\r\n    const returned: useStoredDataRes = [data, setCurrentData]\r\n\r\n    return returned\r\n}\r\n\r\n\r\n","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\BoxDisplay.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Table.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\SearchBar.tsx",["86"],"import { FormEvent } from \"react\"\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { DataContext } from '../context/apiDataContext'\r\nimport  { useStoredData }  from '../hooks/useStoredData'\r\n\r\nconst SearchBar = () => {\r\n    const { fetchData } = useContext(DataContext)\r\n    // this component uses the custom hook useStoredData to store user input into localStorage and\r\n    // fetch it on startup\r\n    const [startDate, setStartDate] = useStoredData('start_date','')\r\n    const [endDate, setEndDate] = useStoredData('end_date','')\r\n    const [token, setToken] = useStoredData('token','')\r\n\r\n    const getData = () => {\r\n        if(fetchData !== undefined) fetchData(\r\n            startDate, \r\n            endDate, \r\n            token\r\n        )\r\n    }\r\n\r\n    // the component fetches data whenever there is a change in the date or tokens\r\n    // the useEffect uses a timeout to cancel the api request if the user puts in a new input within 1s\r\n    // i.e. the api request is only fired after the user has stopped typing for more than 1s\r\n    useEffect(() => {\r\n        const timeOut = setTimeout(() => {getData()}, 1000)\r\n        return () => {clearTimeout(timeOut)}\r\n    },[startDate, token, endDate])\r\n    \r\n    const onSubmit = (event: FormEvent) => {\r\n        event.preventDefault()\r\n        getData()\r\n    }\r\n\r\n    // the form prevents date going out of the 2017-05-01 and 2017-06-15 range (as per requested from the assignment)\r\n    // also the input chooses the type= date to allows easier input and typechecking the date\r\n    // it also make sure the start_date never goes over end_date and vice versa\r\n    return (\r\n        <div style={style}>\r\n            <form onSubmit={onSubmit} style={{margin: 'auto', display: 'flex', flexDirection: 'column', width: '80%'}}>\r\n                <div style={inputSegment}>\r\n                    <label style={label}>Start Date</label>\r\n                    <input\r\n                        style={input}\r\n                        name='start_date' \r\n                        type=\"date\" \r\n                        placeholder=\"yyyy-mm-dd\" \r\n                        min='2017-05-01' \r\n                        max={endDate || '2017-06-15'}\r\n                        value ={startDate}\r\n                        onChange = {(ev) => {\r\n                            const newDate = new Date(ev.target.value)\r\n                            // this is to get the day month year part of the date without the hassle of the hour-minute part\r\n                            setStartDate(newDate.toISOString().split(\"T\")[0])\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div style={inputSegment}>\r\n                    <label style={label}>End Date</label>\r\n                    <input \r\n                        style={input}\r\n                        name='end_date' \r\n                        type=\"date\" \r\n                        placeholder=\"yyyy-mm-dd\" \r\n                        min={startDate || '2017-05-01'} \r\n                        max='2017-06-15'\r\n                        value ={endDate}\r\n                        onChange = {(ev) => {\r\n                            const newDate = new Date(ev.target.value)\r\n                            setEndDate(newDate.toISOString().split(\"T\")[0])\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div style={inputSegment}>\r\n                    <label style={label}>Token</label>\r\n                    <input \r\n                        style={input}\r\n                        name='token'\r\n                        placeholder ='Access Token'\r\n                        value ={token}\r\n                            onChange = {(ev) => {\r\n                                setToken(ev.target.value)\r\n                            }}\r\n                    />\r\n                </div>\r\n                <button \r\n                    onClick={() => {\r\n                        // the reset button allows for fast clearing of the input, wiping them in localStorage also\r\n                        setToken(''); \r\n                        setStartDate('') ;\r\n                        setEndDate('')}}\r\n                    style= {resetButton}\r\n                    className = 'hover'\r\n                    > Reset\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst style: React.CSSProperties = {\r\n    display: 'flex',\r\n    height: '16%',\r\n    marginTop: '0.3rem',\r\n    marginBottom: '0.6rem'\r\n}\r\n\r\nconst inputSegment: React.CSSProperties = {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    margin: 'auto',\r\n    marginTop: '0.5rem',\r\n    width: '90%',\r\n    maxWidth: '800px'\r\n}\r\n\r\nconst resetButton : React.CSSProperties = {\r\n    fontFamily: 'Courier',\r\n    textAlign: 'center',\r\n    height: '2.5rem',\r\n    width: '5rem',\r\n    margin: ' 1rem auto'\r\n}\r\n\r\nconst input: React.CSSProperties = {\r\n    borderRadius: '0.2rem',\r\n    border: '1px solid grey',\r\n    height: '1.4rem',\r\n    fontFamily: 'Courier'\r\n}\r\n\r\nconst label: React.CSSProperties = {\r\n    width: '100%',\r\n    marginBottom: '0.1rem',\r\n    fontSize: 'small'\r\n}\r\nexport default SearchBar","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Row.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Result.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Paginate.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\hooks\\useContainerDimensions.tsx",["87"],"import { useEffect, useState } from \"react\";\r\n\r\n// custom type that extends HTMLDivElement to be used with the custom hooks and typescript\r\nexport interface refElement extends HTMLDivElement {\r\n    current?:  {\r\n        offsetWidth: number\r\n        offsetHeight: number\r\n    }\r\n}\r\n// custom hooks that provide the size the referenced jsx component\r\nexport const useContainerDimensions = (myRef : refElement) => {\r\n    const getDimensions = () => ({\r\n      width: myRef?.current?.offsetWidth || 0,\r\n      height: myRef?.current?.offsetHeight || 0\r\n    })\r\n  \r\n    const [dimensions, setDimensions] = useState({ width: 0, height: 0 })\r\n  \r\n    useEffect(() => {\r\n      const handleResize = () => {\r\n        setDimensions(getDimensions())\r\n      }\r\n  \r\n      if (myRef.current) {\r\n        setDimensions(getDimensions())\r\n      }\r\n  \r\n      window.addEventListener(\"resize\", handleResize)\r\n  \r\n      return () => {\r\n        window.removeEventListener(\"resize\", handleResize)\r\n      }\r\n    }, [myRef])\r\n  \r\n    return dimensions;\r\n  };","E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Footer.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Header.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\MobileRow.tsx",[],["88","89"],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\Graph.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\components\\CustomVictoryGroup.tsx",[],"E:\\Assignments\\giosg\\junior-fetch-api-for\\src\\fetch\\api.tsx",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"90","replacedBy":"94"},{"ruleId":"92","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":18,"column":8,"nodeType":"98","endLine":18,"endColumn":10,"suggestions":"99"},{"ruleId":"96","severity":1,"message":"100","line":27,"column":8,"nodeType":"98","endLine":27,"endColumn":14,"suggestions":"101"},{"ruleId":"96","severity":1,"message":"102","line":28,"column":7,"nodeType":"98","endLine":28,"endColumn":34,"suggestions":"103"},{"ruleId":"96","severity":1,"message":"104","line":33,"column":8,"nodeType":"98","endLine":33,"endColumn":15,"suggestions":"105"},{"ruleId":"90","replacedBy":"106"},{"ruleId":"92","replacedBy":"107"},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],["108"],["109"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array. If 'setData' needs the current value of 'type', you can also switch to useReducer instead of useState and read 'type' in the reducer.","ArrayExpression",["110"],"React Hook useEffect has a missing dependency: 'type'. Either include it or remove the dependency array.",["111"],"React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["112"],"React Hook useEffect has a missing dependency: 'getDimensions'. Either include it or remove the dependency array.",["113"],["108"],["109"],"no-global-assign","no-unsafe-negation",{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},{"desc":"120","fix":"121"},"Update the dependencies array to be: [type]",{"range":"122","text":"123"},"Update the dependencies array to be: [data, type]",{"range":"124","text":"125"},"Update the dependencies array to be: [startDate, token, endDate, getData]",{"range":"126","text":"127"},"Update the dependencies array to be: [getDimensions, myRef]",{"range":"128","text":"129"},[576,578],"[type]",[756,762],"[data, type]",[1188,1215],"[startDate, token, endDate, getData]",[988,995],"[getDimensions, myRef]"]